name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get tag name
        id: tag_name
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "TAG_NAME=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_name.outputs.TAG_NAME }}
          release_name: Release ${{ steps.tag_name.outputs.TAG_NAME }}
          draft: false
          prerelease: false
          body: |
            ## Changes
            
            See the [CHANGELOG](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
            
            ## Installation
            
            ### Download Binary
            Download the appropriate binary for your platform from the assets below.
            
            ### Cargo Install
            ```bash
            cargo install awscw
            ```
            
            ### Usage
            ```bash
            awscw --help
            ```

  build:
    name: Build for ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary-suffix: ""
            
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            binary-suffix: ""
            
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            binary-suffix: ""
            
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            binary-suffix: ""
            
          - target: aarch64-apple-darwin
            os: macos-latest  
            binary-suffix: ""
            
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary-suffix: ".exe"
            
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            binary-suffix: ".exe"

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Configure cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml
          
      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          case "${{ matrix.target }}" in
            *musl*) ;;
            aarch64-unknown-linux-gnu) aarch64-linux-gnu-strip target/${{ matrix.target }}/release/awscw ;;
            *) strip target/${{ matrix.target }}/release/awscw ;;
          esac

      - name: Create archive
        shell: bash
        run: |
          binary_name="awscw${{ matrix.binary-suffix }}"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            binary_path="target/${{ matrix.target }}/release/${binary_name}"
            archive_name="awscw-${{ matrix.target }}.zip"
            7z a "${archive_name}" "${binary_path}"
            echo "ARCHIVE_NAME=${archive_name}" >> $GITHUB_ENV
            echo "ARCHIVE_PATH=${archive_name}" >> $GITHUB_ENV
          else
            binary_path="target/${{ matrix.target }}/release/${binary_name}"
            archive_name="awscw-${{ matrix.target }}.tar.gz"
            tar -czf "${archive_name}" -C "target/${{ matrix.target }}/release" "${binary_name}"
            echo "ARCHIVE_NAME=${archive_name}" >> $GITHUB_ENV
            echo "ARCHIVE_PATH=${archive_name}" >> $GITHUB_ENV
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ARCHIVE_PATH }}
          asset_name: ${{ env.ARCHIVE_NAME }}
          asset_content_type: application/octet-stream

  checksums:
    name: Generate checksums
    needs: [create-release, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate checksums
        run: |
          cd artifacts
          find . -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec sha256sum {} \; > SHA256SUMS
          cat SHA256SUMS

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: artifacts/SHA256SUMS
          asset_name: SHA256SUMS
          asset_content_type: text/plain

  publish-crate:
    name: Publish to crates.io
    needs: [create-release, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        continue-on-error: true  # Don't fail the release if publishing fails